#########################################################################
# FLSUN S1 PRO Comprehensive Macro Suite
# Consolidated version including all functionality:
# - Smart filament loading/unloading with sensor management
# - Material-specific settings and print management
# - Enhanced bed leveling with temperature preservation
# - Sensor control and diagnostics
# - Delta-specific optimizations
#########################################################################

#########################################################################
# REQUIRED MODULES
#########################################################################
[exclude_object]
[respond]

#########################################################################
# CONFIGURATION VARIABLES
#########################################################################
[gcode_macro _S1_PRO_SETTINGS]
description: Central configuration for all S1 PRO settings
######################################################################
# Material-specific variables - CUSTOMIZE THESE FOR YOUR SETUP
######################################################################
variable_material_temps: {'PLA': {'hotend': 210, 'bed_inner': 60, 'bed_outer': 55, 'wait_time': 1}, 'PETG': {'hotend': 240, 'bed_inner': 75, 'bed_outer': 70, 'wait_time': 2}, 'ABS': {'hotend': 260, 'bed_inner': 90, 'bed_outer': 85, 'wait_time': 5}, 'ASA': {'hotend': 270, 'bed_inner': 95, 'bed_outer': 90, 'wait_time': 5}, 'TPU': {'hotend': 220, 'bed_inner': 50, 'bed_outer': 45, 'wait_time': 1}, 'PC': {'hotend': 300, 'bed_inner': 110, 'bed_outer': 105, 'wait_time': 8}}

variable_z_offsets: {'PLA': 0.0, 'PETG': 0.02, 'ABS': 0.05, 'ASA': 0.05, 'TPU': -0.02, 'PC': 0.08}

# S1 PRO performance settings
variable_max_velocity: 1200
variable_max_accel: 40000
variable_print_accel: 20000  # Conservative for quality
variable_travel_accel: 30000
variable_max_flow_rate: 110
gcode:

#########################################################################
# FILAMENT LOADING/UNLOADING WITH SENSOR MANAGEMENT
#########################################################################

[gcode_macro SMART_UNLOAD]
description: Intelligent filament unloading - retracts from extruder only (no sensor interaction)
gcode:
    {% set extruder_temp = params.TEMP|default(235)|int %}
    {% set current_target_temp  = printer.extruder.target|int %}
    {% set speed_factor = printer.gcode_move.speed_factor|float %}
    {% set extrude_factor = printer.gcode_move.extrude_factor|float %}

    {% if printer.print_stats.state != "printing" %}
        # Disable sensors during unloading
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
        SET_FILAMENT_SENSOR SENSOR=my_sensor ENABLE=0
        RESPOND MSG="‚ö†Ô∏è Sensors temporarily disabled for unloading process"
        
        # Temperature management based on printer state
        {% if printer.print_stats.state != "paused" %}
            M104 S{extruder_temp}
            M117 Heating nozzle for unload...
            {action_respond_info("Heating nozzle to unload temperature...")}
            M109 S{extruder_temp}
        {% else %}
            {% if printer.extruder.target == 0 %}
                M104 S{extruder_temp}
                M117 Heating nozzle for unload...
                {action_respond_info("Heating nozzle to unload temperature...")}
                M109 S{extruder_temp}
            {% else %}
                M104 S{printer.extruder.target}
                M117 Maintaining current temperature...
                {action_respond_info("Using current nozzle temperature for unload...")}
                M109 S{printer.extruder.target}
            {% endif %}
        {% endif %}
        
        M117 Unloading filament...
        G91  # Relative positioning
        M220 S100    # Reset speed factor
        M221 S100    # Reset extrude factor
        
        # Multi-stage unloading sequence optimized for direct drive
        RESPOND MSG="üîô Stage 1: Retract from nozzle"
        G1 E-0.5 F2100  # Quick retract (0.5mm @ 35mm/s)
        RESPOND MSG="üîô Stage 2: Clear hotend"
        G1 E-15 F1500   # Clear hotend (15mm @ 25mm/s)
        RESPOND MSG="üîô Stage 3: Final retract"
        G1 E-15 F3000   # Fast final retract (15mm @ 50mm/s)
        M400    
        
        # Restore settings
        M220 S{speed_factor*100}  
        M221 S{extrude_factor*100}
        G90  # Absolute positioning
        SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
        M400
        M117 Unload complete!
        
        # Temperature management after unload
        {% if current_target_temp == 0 or printer.print_stats.state != "paused"%}
            M104 S0
        {% endif %}
        RESPOND MSG="‚úÖ Filament unloaded from extruder. Remove filament from guide tube."
        RESPOND MSG="‚ö†Ô∏è IMPORTANT: Run ENABLE_SENSORS before printing!"
    {% else %}
        {action_respond_info("Cannot unload filament while printing!")}
        M117 Cannot unload while printing!
    {% endif %}

[gcode_macro SMART_LOAD]
description: Intelligent filament loading with automatic sensor management
gcode:
    {% set extruder_temp = params.TEMP|default(220)|int %}
    {% set speed_factor = printer.gcode_move.speed_factor|float %}
    {% set extrude_factor = printer.gcode_move.extrude_factor|float %}

    # CRITICAL: Disable sensors during loading as filament passes through them
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=my_sensor ENABLE=0
    RESPOND MSG="‚ö†Ô∏è Sensors temporarily disabled for loading process"

    {% if printer.print_stats.state != "printing" %}
        # Heat extruder if needed
        {% if printer.extruder.temperature < extruder_temp - 5 %}
            M104 S{extruder_temp}
            M117 Heating for filament load...
            RESPOND MSG="üî• Heating to {extruder_temp}¬∞C for loading"
            M109 S{extruder_temp}
        {% endif %}
        
        M117 Loading filament...
        G91  # Relative positioning
        M220 S100    # Reset speed factor
        M221 S100    # Reset extrude factor
        
        # Multi-stage loading sequence optimized for direct drive
        RESPOND MSG="üì• Stage 1: Initial feed"
        G1 E10 F300   # Slow initial feed (10mm @ 5mm/s)
        RESPOND MSG="üì• Stage 2: Prime extruder"
        G1 E15 F600   # Prime extruder (15mm @ 10mm/s)
        RESPOND MSG="üì• Stage 3: Final extrusion"
        G1 E5 F150    # Final slow extrusion (5mm @ 2.5mm/s)
        M400
        
        # Restore settings
        M220 S{speed_factor*100}
        M221 S{extrude_factor*100}
        G90  # Absolute positioning
        M400
        
        M117 Load complete - Enable sensors!
        RESPOND MSG="‚úÖ Filament loaded successfully!"
        RESPOND MSG="‚ö†Ô∏è IMPORTANT: Run ENABLE_SENSORS before printing!"
    {% else %}
        {action_respond_info("Cannot load filament while printing!")}
        M117 Cannot load while printing!
    {% endif %}

#########################################################################
# SENSOR MANAGEMENT
#########################################################################

[gcode_macro ENABLE_SENSORS]
description: Enable all filament sensors for printing
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=my_sensor ENABLE=1
    RESPOND MSG="‚úÖ All filament sensors ENABLED and ready for printing"
    
    # Check and report sensor status
    {% if 'filament_switch_sensor filament_sensor' in printer %}
        {% set switch_status = printer['filament_switch_sensor filament_sensor'].filament_detected %}
        RESPOND MSG="üì° Runout sensor: {'FILAMENT DETECTED ‚úì' if switch_status else '‚ö†Ô∏è NO FILAMENT'}"
    {% endif %}
    
    {% if 'filament_motion_sensor my_sensor' in printer %}
        {% set motion_status = printer['filament_motion_sensor my_sensor'].filament_detected %}
        RESPOND MSG="üîÑ Motion sensor: {'READY ‚úì' if motion_status else '‚ö†Ô∏è NOT READY'}"
    {% endif %}

[gcode_macro DISABLE_SENSORS]
description: Disable all filament sensors for maintenance
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=my_sensor ENABLE=0
    RESPOND MSG="‚ö†Ô∏è All filament sensors DISABLED for maintenance"

[gcode_macro SENSOR_STATUS]
description: Detailed filament sensor diagnostic report
gcode:
    RESPOND MSG="=== üîç FILAMENT SENSOR STATUS ==="
    
    # Runout sensor status
    {% if 'filament_switch_sensor filament_sensor' in printer %}
        {% set switch_status = printer['filament_switch_sensor filament_sensor'].filament_detected %}
        {% set switch_enabled = printer['filament_switch_sensor filament_sensor'].enabled %}
        RESPOND MSG="üì° Runout Sensor:"
        RESPOND MSG="   ‚Ä¢ State: {'ENABLED' if switch_enabled else 'DISABLED'}"
        RESPOND MSG="   ‚Ä¢ Filament: {'DETECTED' if switch_status else 'NOT DETECTED'}"
        RESPOND MSG="   ‚Ä¢ Pin: PA11"
    {% else %}
        RESPOND MSG="‚ùå Runout sensor: NOT CONFIGURED"
    {% endif %}
    
    # Motion sensor status
    {% if 'filament_motion_sensor my_sensor' in printer %}
        {% set motion_status = printer['filament_motion_sensor my_sensor'].filament_detected %}
        {% set motion_enabled = printer['filament_motion_sensor my_sensor'].enabled %}
        RESPOND MSG="üîÑ Motion Sensor (Clog Detection):"
        RESPOND MSG="   ‚Ä¢ State: {'ENABLED' if motion_enabled else 'DISABLED'}"
        RESPOND MSG="   ‚Ä¢ Status: {'ACTIVE' if motion_status else 'INACTIVE'}"
        RESPOND MSG="   ‚Ä¢ Pin: PA10"
        RESPOND MSG="   ‚Ä¢ Detection Length: 18mm"
    {% else %}
        RESPOND MSG="‚ùå Motion sensor: NOT CONFIGURED"
    {% endif %}
    
    RESPOND MSG="================================="

#########################################################################
# ENHANCED BED LEVELING WITH TEMPERATURE PRESERVATION
#########################################################################

[gcode_macro BED_LEVEL_1]
description: Delta calibration with automatic temperature preservation
rename_existing: BED_LEVEL_1_BASE
gcode:
    {% set nozzle_temp = printer.extruder.target|float %}
    {% set bed_temp = printer.heater_bed.target|float %}

    # Save current temperatures
    SAVE_VARIABLE VARIABLE=nozzle_temp VALUE={nozzle_temp}
    SAVE_VARIABLE VARIABLE=bed_temp VALUE={bed_temp}

    RESPOND MSG="üîß Saved temperatures - Nozzle: {nozzle_temp|round(1)}¬∞C, Bed: {bed_temp|round(1)}¬∞C"
    
    # Level sequence
    SET_GCODE_OFFSET Z=0
    M117 üõ†Ô∏è Delta Calibration Starting
    G28
    M204 S200  # Set low acceleration for accuracy
    
    # Heat to standard calibration temps
    M104 S140
    M140 S60
    M109 S140
    M190 S60
    
    RESPOND MSG="üìê Running delta calibration..."
    DELTA_CALIBRATE
    
    G1 X0 Y0 Z50 F4200
    M104 S0
    M140 S0
    G28
    
    SAVE_VARIABLE VARIABLE=level_state VALUE=True
    RESPOND MSG="‚úÖ Delta calibration complete!"

[gcode_macro BED_LEVEL_2]
description: Bed mesh calibration with temperature restoration
rename_existing: BED_LEVEL_2_BASE
gcode:
    M117 üõ†Ô∏è Mesh Calibration Starting
    G28

    # Restore saved temperatures
    {% set svv = printer.save_variables.variables %}
    {% set nozzle_temp = svv.nozzle_temp|default(0)|float %}
    {% set bed_temp = svv.bed_temp|default(0)|float %}

    RESPOND MSG="‚ôªÔ∏è Restoring temperatures - Nozzle: {nozzle_temp|round(1)}¬∞C, Bed: {bed_temp|round(1)}¬∞C"

    # Heat to saved temps
    M104 S{nozzle_temp}
    M140 S{bed_temp}
    M109 S{nozzle_temp}
    M190 S{bed_temp}

    RESPOND MSG="üîÑ Creating bed mesh..."
    G1 X0 Y0 Z50 F4200
    BED_MESH_CALIBRATE
    G1 X0 Y0 Z50 F4200
    G28

    SAVE_VARIABLE VARIABLE=level2_state VALUE=True
    RESPOND MSG="‚úÖ Bed mesh calibration complete!"

#########################################################################
# PRINT START/END SEQUENCES
#########################################################################

[gcode_macro S1_PRO_PRINT_START]
description: Comprehensive print start sequence with all optimizations
gcode:
    {% set BED_TEMP = params.BED|default(60)|int %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(210)|int %}
    {% set MATERIAL = params.MATERIAL|default('PLA')|upper %}
    
    RESPOND MSG="üöÄ S1 PRO Print Start: {MATERIAL} @ {EXTRUDER_TEMP}¬∞C/{BED_TEMP}¬∞C"
    
    # Initialize printer state
    CLEAR_PAUSE
    G21  # Metric
    M82  # Absolute extrusion
    G90  # Absolute positioning
    
    # Enable sensors for printing
    ENABLE_SENSORS
    
    # Home if needed
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G28
        RESPOND MSG="üè† Homing complete"
    {% endif %}
    
    # Set performance limits
    SET_VELOCITY_LIMIT VELOCITY={printer["gcode_macro _S1_PRO_SETTINGS"].max_velocity}
    SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro _S1_PRO_SETTINGS"].travel_accel}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=5
    
    # Heat bed with smart zones
    S1_PRO_HEAT_ZONES MATERIAL={MATERIAL}
    
    # Material-specific heat soak
    {% set settings = printer["gcode_macro _S1_PRO_SETTINGS"].material_temps %}
    {% if MATERIAL in settings %}
        {% set wait_minutes = settings[MATERIAL].wait_time %}
        RESPOND MSG="üõÅ Heat soaking for {wait_minutes} minutes..."
        WAIT_FOR WAIT_TIME={wait_minutes * 60}
    {% endif %}
    
    # Load temperature-specific mesh
    S1_PRO_MESH_MANAGER BED_TEMP={BED_TEMP}
    
    # Heat extruder and apply material settings
    M104 S{EXTRUDER_TEMP}
    S1_PRO_MATERIAL_SETTINGS MATERIAL={MATERIAL}
    M109 S{EXTRUDER_TEMP}
    
    # Prime line
    S1_PRO_PRIME_LINE
    
    # Set printing acceleration
    SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro _S1_PRO_SETTINGS"].print_accel}
    
    RESPOND MSG="üéØ S1 PRO ready to print!"

[gcode_macro S1_PRO_PRINT_END]
description: Comprehensive print end sequence
gcode:
    RESPOND MSG="üèÅ S1 PRO Print End"
    
    # Retract and lift
    G91  # Relative
    G1 E-5 F3600    # Quick retract
    G1 E-10 F1800   # Slow retract from melt zone
    G1 Z5 F3000     # Lift nozzle
    G90  # Absolute
    
    # Home and shutdown
    G28
    M104 S0  # Extruder off
    M140 S0  # Bed off
    M107     # Fan off
    
    # Disable steppers after delay
    M84 S600  # Disable steppers after 10 minutes
    
    # Reset to safe settings
    SET_VELOCITY_LIMIT ACCEL=10000
    
    RESPOND MSG="‚úÖ Print complete! Thank you for using S1 PRO."

#########################################################################
# MATERIAL AND TEMPERATURE MANAGEMENT
#########################################################################

[gcode_macro S1_PRO_HEAT_ZONES]
description: Smart dual-zone heating for S1 PRO
gcode:
    {% set MATERIAL = params.MATERIAL|default('PLA')|upper %}
    {% set settings = printer["gcode_macro _S1_PRO_SETTINGS"].material_temps %}
    
    {% if MATERIAL in settings %}
        {% set inner_temp = settings[MATERIAL].bed_inner %}
        {% set outer_temp = settings[MATERIAL].bed_outer %}
        
        RESPOND MSG="üî• Heating zones for {MATERIAL}: Inner={inner_temp}¬∞C, Outer={outer_temp}¬∞C"
        
        # Heat both zones
        M140 S{inner_temp}  # Inner bed
        SET_HEATER_TEMPERATURE HEATER=HotBed1 TARGET={outer_temp}  # Outer bed zone
        
        # Wait for both zones to reach temperature
        M190 S{inner_temp}
        TEMPERATURE_WAIT SENSOR="heater_generic HotBed1" MINIMUM={outer_temp - 2}
        
    {% else %}
        RESPOND MSG="‚ö†Ô∏è Unknown material: {MATERIAL}, using PLA defaults"
        M140 S60
        SET_HEATER_TEMPERATURE HEATER=HotBed1 TARGET=55
        M190 S60
        TEMPERATURE_WAIT SENSOR="heater_generic HotBed1" MINIMUM=53
    {% endif %}

[gcode_macro S1_PRO_MATERIAL_SETTINGS]
description: Apply material-specific settings and offsets
gcode:
    {% set MATERIAL = params.MATERIAL|default('PLA')|upper %}
    {% set settings = printer["gcode_macro _S1_PRO_SETTINGS"].material_temps %}
    {% set offsets = printer["gcode_macro _S1_PRO_SETTINGS"].z_offsets %}
    
    {% if MATERIAL in settings %}
        # Apply Z offset for material
        {% if MATERIAL in offsets %}
            SET_GCODE_OFFSET Z={offsets[MATERIAL]}
            RESPOND MSG="üîß Z offset for {MATERIAL}: {offsets[MATERIAL]}mm"
        {% endif %}
        
        # Set performance based on material characteristics
        {% if MATERIAL in ['ABS', 'ASA', 'PC'] %}
            # High-temp materials: more conservative settings
            SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro _S1_PRO_SETTINGS"].print_accel}
            RESPOND MSG="üèÅ Using conservative acceleration for {MATERIAL}"
        {% else %}
            # Standard materials: full performance
            SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro _S1_PRO_SETTINGS"].max_accel}
            RESPOND MSG="üöÄ Using maximum performance for {MATERIAL}"
        {% endif %}
    {% endif %}

[gcode_macro S1_PRO_MESH_MANAGER]
description: Temperature-based mesh management
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|int %}
    {% set PROFILE_NAME = 's1pro_' + BED_TEMP|string + 'c' %}
    
    RESPOND MSG="üìê Checking for mesh profile: {PROFILE_NAME}"
    
    {% if PROFILE_NAME in printer.bed_mesh.profiles %}
        BED_MESH_PROFILE LOAD={PROFILE_NAME}
        RESPOND MSG="‚úÖ Loaded existing mesh: {PROFILE_NAME}"
    {% else %}
        RESPOND MSG="üîÑ Creating new mesh for {BED_TEMP}¬∞C..."
        BED_MESH_CALIBRATE PROFILE={PROFILE_NAME}
        BED_MESH_PROFILE SAVE={PROFILE_NAME}
        RESPOND MSG="üíæ Saved new mesh: {PROFILE_NAME}"
    {% endif %}

#########################################################################
# PRIME LINE AND UTILITIES
#########################################################################

[gcode_macro S1_PRO_PRIME_LINE]
description: Draw optimized prime line for S1 PRO delta geometry
gcode:
    RESPOND MSG="üßµ Drawing S1 PRO prime line"
    
    # Move to safe prime position (within 160mm radius)
    G1 Z5 F3000
    G1 X0 Y-145 Z0.4 F6000  # Safe position for 320mm diameter
    
    # Prime sequence
    M107  # Fan off during prime
    G92 E0
    G1 X25 Y-145 Z0.3 E8 F1000   # Initial extrusion
    G1 X50 Y-140 Z0.3 E16 F1200  # Medium speed
    G1 X75 Y-135 Z0.3 E26 F1500  # Faster for longer line
    G1 Z2 F2000  # Lift
    G92 E0
    
    RESPOND MSG="‚úÖ Prime line complete"

[gcode_macro WAIT_FOR]
description: Wait for specified time with progress updates
gcode:
    {% set wait_time = params.WAIT_TIME|default(60)|int %}
    {% set interval = 30 %}
    {% set loops = wait_time // interval %}
    {% set remainder = wait_time % interval %}

    RESPOND MSG="‚è≥ Waiting {wait_time} seconds..."

    {% for i in range(loops) %}
        {% set remaining = wait_time - (i * interval) %}
        {% set minutes = remaining // 60 %}
        {% set seconds = remaining % 60 %}
        RESPOND MSG="‚è≥ {minutes}m {seconds}s remaining..."
        G4 P{interval * 1000}
    {% endfor %}

    {% if remainder > 0 %}
        G4 P{remainder * 1000}
    {% endif %}

    RESPOND MSG="‚úÖ Wait complete"

#########################################################################
# MAINTENANCE AND CALIBRATION
#########################################################################

[gcode_macro S1_PRO_MAINTENANCE_MODE]
description: Enter safe maintenance mode
gcode:
    RESPOND MSG="üîß Entering S1 PRO Maintenance Mode"
    
    # Disable all sensors
    DISABLE_SENSORS
    
    # Turn off heaters
    M104 S0
    M140 S0
    
    # Set conservative motion limits
    SET_VELOCITY_LIMIT VELOCITY=100
    SET_VELOCITY_LIMIT ACCEL=1000
    
    # Disable extruder
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    
    RESPOND MSG="‚ö†Ô∏è Maintenance mode active. Safe for manual operations."

[gcode_macro S1_PRO_FULL_CALIBRATION]
description: Complete calibration sequence for S1 PRO
gcode:
    RESPOND MSG="üéØ Starting S1 PRO Full Calibration"
    
    # Stage 1: Delta calibration
    G28
    DELTA_CALIBRATE
    RESPOND MSG="üìê Delta calibration complete"
    
    # Stage 2: Create temperature mesh profiles
    {% for temp in [60, 70, 80, 90, 100] %}
        RESPOND MSG="üå°Ô∏è Creating mesh for {temp}¬∞C"
        M140 S{temp}
        M190 S{temp}
        WAIT_FOR WAIT_TIME=120  # 2 minute heat soak
        BED_MESH_CALIBRATE PROFILE=s1pro_{temp}c
        BED_MESH_PROFILE SAVE=s1pro_{temp}c
    {% endfor %}
    
    # Cool down
    M140 S0
    G28
    SAVE_CONFIG
    RESPOND MSG="‚úÖ S1 PRO calibration complete! Restart required."

#########################################################################
# MATERIAL-SPECIFIC LOAD/UNLOAD MACROS
#########################################################################

[gcode_macro LOAD_PLA]
description: Load PLA filament with optimal temperature
gcode:
    SMART_LOAD TEMP=210

[gcode_macro UNLOAD_PLA]
description: Unload PLA filament with optimal temperature
gcode:
    SMART_UNLOAD TEMP=210

[gcode_macro LOAD_PETG]
description: Load PETG filament with optimal temperature
gcode:
    SMART_LOAD TEMP=240

[gcode_macro UNLOAD_PETG]
description: Unload PETG filament with optimal temperature
gcode:
    SMART_UNLOAD TEMP=240

[gcode_macro LOAD_ABS]
description: Load ABS filament with optimal temperature
gcode:
    SMART_LOAD TEMP=260

[gcode_macro UNLOAD_ABS]
description: Unload ABS filament with optimal temperature
gcode:
    SMART_UNLOAD TEMP=260

[gcode_macro LOAD_ASA]
description: Load ASA filament with optimal temperature
gcode:
    SMART_LOAD TEMP=270

[gcode_macro UNLOAD_ASA]
description: Unload ASA filament with optimal temperature
gcode:
    SMART_UNLOAD TEMP=270

[gcode_macro LOAD_TPU]
description: Load TPU filament with optimal temperature and slower speeds
gcode:
    SMART_LOAD TEMP=220

[gcode_macro UNLOAD_TPU]
description: Unload TPU filament with optimal temperature
gcode:
    SMART_UNLOAD TEMP=220

[gcode_macro LOAD_PC]
description: Load PC filament with optimal temperature
gcode:
    SMART_LOAD TEMP=300

[gcode_macro UNLOAD_PC]
description: Unload PC filament with optimal temperature
gcode:
    SMART_UNLOAD TEMP=300

#########################################################################
# QUICK ACCESS MACROS
#########################################################################

[gcode_macro LOAD]
description: Quick filament load (alias for SMART_LOAD)
gcode:
    SMART_LOAD TEMP={params.TEMP|default(220)}

[gcode_macro UNLOAD]
description: Quick filament unload (alias for SMART_UNLOAD)
gcode:
    SMART_UNLOAD TEMP={params.TEMP|default(235)}

[gcode_macro CHECK_SENSORS]
description: Quick sensor check (alias for SENSOR_STATUS)
gcode:
    SENSOR_STATUS

#########################################################################
# DUAL ZONE BED CONTROL
#########################################################################

[gcode_macro M141]
description: Set outer bed temperature (S = target temp)
gcode:
    {% set temp = params.S|default(0)|int %}
    SET_HEATER_TEMPERATURE HEATER=HotBed1 TARGET={temp}
    
[gcode_macro M191]
description: Wait for outer bed temperature (S = target temp)
gcode:
    {% set temp = params.S|default(0)|int %}
    SET_HEATER_TEMPERATURE HEATER=HotBed1 TARGET={temp}
    TEMPERATURE_WAIT SENSOR="heater_generic HotBed1" MINIMUM={temp - 2}

[gcode_macro BED_TEMPS]
description: Set both bed zones (INNER= OUTER=)
gcode:
    {% set inner = params.INNER|default(60)|int %}
    {% set outer = params.OUTER|default(55)|int %}
    M140 S{inner}
    M141 S{outer}
    RESPOND MSG="üî• Bed zones set: Inner={inner}¬∞C, Outer={outer}¬∞C"