# FLSUN S1 PRO Configuration

[include flsun_func.cfg]
[include s1_pro_macros.cfg]
[include timelapse.cfg]

####################################################################################################
#motor part
####################################################################################################
[stepper_a]
step_pin: PD6
dir_pin: !PD11  # motor direction pin,"!PE2" and "PE2" represent different directions
enable_pin: !PD10
microsteps: 16 
rotation_distance: 60 #rotation_distance = <full_steps_per_rotation> * <microsteps> / <steps_per_mm>, 
endstop_pin: ^PD9
#position_endstop: 435 # printer printable height
#arm_length = 385 
homing_speed: 50
homing_retract_dist: 3

[stepper_b]
step_pin: PD15
dir_pin: !PE9  # motor direction pin
enable_pin: !PE8
microsteps: 16
rotation_distance: 60
endstop_pin: ^PE7
#position_endstop: 435
#arm_length = 385

[stepper_c]
step_pin: PE3
dir_pin: !PC5  # motor direction pin
enable_pin: !PA4
microsteps: 16
rotation_distance: 60
endstop_pin: ^PA3
#position_endstop: 435
#arm_length = 385

[extruder]
step_pin: PE0
dir_pin: !PB9
enable_pin: !PE4
microsteps: 16
rotation_distance: 4.5
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PB8
sensor_type: RT 100K 3950
pullup_resistor: 510
sensor_pin: PC2
min_temp: -10 # extruder min temp
max_temp: 370 # extruder max temp
max_extrude_cross_section: 5.0  # Safety limit for thick layers (reduced from 50)
max_extrude_only_distance: 100  # Standard for direct drive extruder
instantaneous_corner_velocity: 1.0  # Helps with pressure advance
# Direct drive extruder typical PA values are 0.02-0.08
pressure_advance: 0.05  # Starting value for direct drive - tune with TUNING_TOWER
pressure_advance_smooth_time: 0.040  # Smoothing for direct drive
self_adaption_pressure_advance: off  # Disabled - use fixed PA for stability
#pressure_advance: 0.041
control:pid
pid_Kp: 24.261
pid_Ki: 1.304
pid_Kd: 112.813

[tmc5160 extruder]
cs_pin:PD7
spi_speed:500000
spi_software_sclk_pin:PA6
spi_software_mosi_pin:PA5
spi_software_miso_pin:PC4
sense_resistor: 0.0375
run_current:1.2
hold_current:0.300
interpolate: True  # Enable 256 microstep interpolation for smoother motion
stealthchop_threshold: 999999  # Enable StealthChop for quiet operation

####################################################################################################
#mcu ,pin
####################################################################################################
[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[heater_fan motherboard_fan]
pin: PB5
heater_temp:50.0

[fan]
pin: PC7
cycle_time: 0.0001
max_power: 1.0  # Allow full fan power - control via slicer/macros instead

[heater_fan heat_sink_fan] 
pin: PA2
heater_temp: 50.0
shutdown_speed: 0

[heater_bed]
heater_pin: PD5
sensor_pin: PC1
sensor_type: RT 100K 3950
min_temp: -5
max_temp: 140 #hotbed max temp
control:pid
pid_Kp: 42.423
pid_Ki: 1.911
pid_Kd: 235.447

[heater_generic HotBed1]
gcode_id: HB1
heater_pin: PB3
sensor_pin: PC0
sensor_type: RT 100K 3950
min_temp: -5
max_temp: 140 #hotbed max temp
control:pid
pid_Kp: 18.240
pid_Ki: 0.558
pid_Kd: 149.109

[temperature_sensor Armv7 mcu] #the temp of pad
sensor_type: temperature_host
min_temp: -50
max_temp: 100

[temperature_sensor mcu_temp] #the temp of mcu
sensor_type: temperature_mcu
min_temp: -50
max_temp: 100

####################################################################################################
# Thermal runaway protection
####################################################################################################
[verify_heater extruder]
max_error: 120
check_gain_time: 20
hysteresis: 5
heating_gain: 2

[verify_heater heater_bed]
max_error: 120
check_gain_time: 60
hysteresis: 5
heating_gain: 1

[verify_heater HotBed1]
max_error: 120
check_gain_time: 60
hysteresis: 5
heating_gain: 1

[input_shaper]
#shaper_freq_x: 41.4   # frequency for the X mark of the test model
#shaper_freq_y: 44.4  # frequency for the Y mark of the test model

[printer]
kinematics: delta
max_velocity: 3000 
max_accel: 40000 
max_accel_to_decel: 6000  
square_corner_velocity: 5 
max_z_velocity: 3000
#delta_radius: 183.3 # delta radius,default is 183.3
print_radius: 165 
minimum_z_position:-5 # min z position nozzle won't go to the position which Z lower the vaule
# Build volume safety limits
minimum_x: -165
maximum_x: 165
minimum_y: -165
maximum_y: 165
minimum_z: 0
maximum_z: 430
x_size_offset: 0   #adjust X size accuracy
y_size_offset: 0   #adjust Y size accuracy

################################################################################################################
#calibrate and bed_mesh
################################################################################################################
[delta_calibrate]
radius: 145
horizontal_move_z: 10 #This value is related to the lift height of the nozzle during delta_calibrate
Speed: 100

[probe]  
pin: !PD4
x_offset: 0 
y_offset: 0 
z_offset: -0.25 #the distance between nozzle and level switch
speed: 10
samples: 2 #probe one point three times get an average
samples_result: average  
sample_retract_dist: 5
samples_tolerance: 0.05 # precision
samples_tolerance_retries: 5 

[bed_mesh]  
speed: 100
horizontal_move_z: 7 #This value is related to the lift height of the nozzle during bed_mesh
mesh_radius: 156
mesh_origin: 0,0  
round_probe_count: 7 # 7*7
algorithm: bicubic
fade_start: 0.2
fade_end: 2
fade_target: 0
#############################################################################################################
#GCODE
#############################################################################################################

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1

[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1

[gcode_macro bed_level_1]
description: Legacy bed level macro - use BED_LEVEL_1 from s1_pro_macros.cfg instead
gcode:
    BED_LEVEL_1

[gcode_macro bed_level_2]
description: Legacy bed level macro - use BED_LEVEL_2 from s1_pro_macros.cfg instead
gcode:
    BED_LEVEL_2

[gcode_macro UNLOAD_FILAMENT] #unload filament - DEPRECATED
description: Legacy unload macro - use SMART_UNLOAD from s1_pro_macros.cfg (optimized for direct drive)
gcode:
    M117 Please use SMART_UNLOAD - it's optimized for direct drive!
    SMART_UNLOAD TEMP=235

[gcode_macro CLEAN_FILAMENT] #clean filament, Actually, the feeding is 16cm
gcode:
    {% if 'S' in params %}
      {% set speed_factor = printer.gcode_move.speed_factor|float %}
      {% set extrude_factor = printer.gcode_move.extrude_factor|float %}
      {% set temperature = params.S|int %}
      {% if printer.extruder.temperature < temperature - 5 %}
        M109 S{temperature}
      {% endif %}
      M104 S{temperature}

      M117 Heating for filament purge...
      G91
      M220 S100   # set speed_factor to normal
      M221 S100   # set extrude_factor to normal
      G1 E100 F1000  # Purge 100mm
      G1 E60 F500    # Purge additional 60mm
      M220 S{speed_factor*100} # recover speed_factor
      M221 S{extrude_factor*100} # recover extrude_factor
      G90
      M400
      M104 S0  # Turn off hotend after purge
      SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
      M117 Filament purge complete!
    {% else %}
      M117 CLEAN_FILAMENT need temperaure,like CLEAN_FILAMENT S=240
    {% endif %}

[gcode_macro LOAD_FILAMENT] #load filament - DEPRECATED
description: Legacy load macro - use SMART_LOAD from s1_pro_macros.cfg for better sensor management
gcode:
    M117 Please use SMART_LOAD instead - it handles sensors properly!
    SMART_LOAD TEMP={params.S|default(220)}
    
[gcode_macro M600]
description: Enhanced filament change procedure with proper positioning
gcode:
    {% set X = params.X|default(0)|float %}
    {% set Y = params.Y|default(-140)|float %}
    {% set Z = params.Z|default(10)|float %}
    
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    
    # Initial retract to prevent oozing
    G91
    G1 E-1 F2700
    
    # Lift nozzle
    G1 Z{Z}
    
    # Move to change position
    G90
    G1 X{X} Y{Y} F3000
    
    # Unload filament with enhanced sequence
    G91
    SMART_UNLOAD
    
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro WAIT_HOTEND]
description: Wait for hotend to reach temperature
gcode:
    {% set TEMP = params.TEMP|default(220)|int %}
    M109 S{TEMP}

[gcode_macro WAIT_BED]
description: Wait for bed to reach temperature
gcode:
    {% set TEMP = params.TEMP|default(60)|int %}
    M190 S{TEMP}
  
[gcode_macro TMC]
gcode:
    DUMP_TMC STEPPER=extruder

[gcode_macro save_time]
gcode:
    {% if printer.save_variables.variables.total_time %}
      {% set print_time = printer.save_variables.variables.total_time %}
    {% else %} 
      {% set print_time = 0 %}
    {% endif %}
    {% set print_time = print_time + printer.print_stats.print_duration/3600 %}
    SAVE_VARIABLE VARIABLE=total_time VALUE={print_time}

[gcode_macro SET_GCODE_OFFSET]  
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
      {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %} 
      {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}
    
    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
    
    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
    {%if 'Z_ADJUST' in params %}
      {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
      {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
    {% endif %}
    {% if (ns.offsets.z | float) <= 0.2000001 and (ns.offsets.z | float) >= -0.2000001 %}
      _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}
      SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"
    {% endif %}

[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 3
gcode:  
    {% if printer.save_variables.variables.gcode_offsets %}
      {% set offsets = printer.save_variables.variables.gcode_offsets %}

      _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}

      { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}
    {% if printer.save_temp_variables.variables.level_state %}
      F104 K=level_state V=False
      bed_level_2
    {% endif %}
    {% if printer.save_temp_variables.variables.level2_state %}
      F104 K=level2_state V=False
      M117 bed level done!
    {% endif %}
    {% if printer.save_temp_variables.variables.resonances_state %}
      F104 K=resonances_state V=False
      G28
      M117 Measuring Resonances done!
    {% endif %}
    {% if printer.save_variables.variables.was_interrupted %}
      M117 power loss occur!
    {% endif %}
    SAVE_VARIABLE VARIABLE=plr_flag VALUE=False

[delayed_gcode LOAD_FUNCTION_SWITCH_DELAY]
initial_duration: 1
gcode:  
    LOAD_FUNCTION_SWITCH

[idle_timeout]
gcode:
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
    {% if printer.print_stats.state != "paused" %}
      {% if 'heaters' in printer %}
        TURN_OFF_HEATERS
      {% endif %}
    {% endif %}
timeout: 600
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.

####################################################################################################################################
#PAUSE ,RESUME ,CANCEL_PRINT
####################################################################################################################################
[pause_resume]

[gcode_macro PAUSE] 
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% if printer.print_stats.state == "printing" %}
      # save the current state for power loss
      SAVE_POWER_LOSS_PARAMS
      # set default pause axis
      {% set x = params.X|default(0) %}      #edit to your park position
      {% set y = params.Y|default(-140) %}      #edit to your park position
      {% set z = params.Z|default(10)|float %} #edit to your park position
      {% set e = params.E|default(1) %}        #edit to your retract length
      ##### calculate save lift position #####
      {% set max_z = printer.toolhead.axis_maximum.z|float %}
      {% set homed_z = printer.gcode_move.homing_origin[2]|float %}
      {% set limit_z = (max_z - homed_z)|round(4,'floor') %}
      {% set act_z = printer.toolhead.position.z|float %}
      {% set lift_z = z|abs %}

      ### If the current position is greater than max_z-50, xy is set to 0###
      ### Normally, the max_z-limit_z is around 46mm,now expand 50mm###
      {% if act_z >= limit_z - 50 %}
        {% set x = 0 %}
        {% set y = 0 %}
        {% set toohigh = true %}
      {% else %}
        {% set toohigh = false %}
      {% endif %}

      {% if act_z < (limit_z - lift_z) %}
        {% set z_safe = act_z + lift_z %}
      {% else %}
        {% set z_safe = limit_z %}
      {% endif %}

      {% set fan_speed = printer.fan.speed|float %}
      SET_GCODE_VARIABLE MACRO=PRE_RESUME VARIABLE=fan_speed VALUE={fan_speed}
      ##### end of definitions #####
      PAUSE_BASE
      G91
      {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E-{e} F2100
      {% else %}
        {action_respond_info("Extruder not hot enough")}
      {% endif %}
      {% if "xyz" in printer.toolhead.homed_axes %}    
        G90
        {% if toohigh == true %}
          G1 X{x} Y{y} z{z_safe} F6000
          M117 Current position is too high,pause and move to X={ x } Y={ y } Z={ z_safe }
        {% else %}
          # Move the Z-axis to a safe height to avoid collision with the bed or other objects 
          G1 z{z_safe} F6000
          # Move the X and Y axes to the specified position
          G1 X{x} Y{y} F6000
          # clear bed_mesh Z fade height
          G1 X{x} Y{y} F6000
          M117 Pause and move to X={ x } Y={ y } Z={ z_safe }
        {% endif %}
      {% else %}
        {action_respond_info("Printer not homed")}
      {% endif %}
      {% set nozzle_temp = printer.extruder.target|float %}
      SET_GCODE_VARIABLE MACRO=PRE_RESUME VARIABLE=nozzle_temp VALUE={nozzle_temp}
      M104 S90
      M106 S153
      M400
    {% endif %}

[gcode_macro _RESUME_PRE_EXTRUDE]
gcode:
    {% set e = params.E|default(1) %}
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    G90
    M400

[gcode_macro PRE_RESUME]  
description: recover some actions before printing
variable_fan_speed: 0
variable_nozzle_temp: 0
gcode:
      M109 S{nozzle_temp}
      {% set e = params.E|default(1) %} #edit to your retract length
      _RESUME_PRE_EXTRUDE E={e}
      SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
      screen_led_on R=0 O=0 W=1
      {% set fan_speed = fan_speed / printer.fan.max_power * 255 %}
      M106 S{fan_speed}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####

    F107 {get_params}

###########################################################################################################################
###########################################################################################################################
[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode:
    M106 S0
    TURN_OFF_HEATERS
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    SET_FAN_SPEED FAN=box_fan SPEED=0

[save_variables]
filename: ~/savedVariables1.cfg
tempfile: ~/temp/savedVariables1.cfg

[save_temp_variables]
filename: ~/temp/tempVariables.cfg

[rotate_logger]

[gcode_arcs]


[display_status]

[exclude_object]

[resonance_tester]
probe_points:0, 0, 20
accel_chip: adxl345
min_freq: 20
max_freq: 80
accel_per_hz: 300

[adxl345]
cs_pin:PE13
spi_speed: 100000
spi_software_sclk_pin:PE10
spi_software_mosi_pin:PE11
spi_software_miso_pin:PE12
rate:3200

###########################################################################################################################
# M106
###########################################################################################################################
[gcode_macro M106]
description: fan speed control
rename_existing: M106.1
gcode:
    {% set last_fan_speed = printer.fan.speed|float %}
    {% set max_power = printer.fan.max_power|float %}
    {% set last_fan_value = last_fan_speed/max_power %}
    {% set fan_speed = params.S|default(255)|int %}
    {% if last_fan_value < 0.1 and fan_speed > 100 %}
      M106.1 S60
      SET_GCODE_VARIABLE MACRO=set_fan VARIABLE=fan_speed VALUE={fan_speed}
      UPDATE_DELAYED_GCODE ID=setfan DURATION=2
    {% else %}
      M106.1 S{fan_speed}
    {% endif %}
[gcode_macro set_fan]
variable_fan_speed: 0
gcode:
    M106.1 S{fan_speed}
[delayed_gcode setfan]
initial_duration: 0 #if initial_duration is zero, the delayed gcode won't start by default
gcode:
    set_fan
    UPDATE_DELAYED_GCODE ID=setfan DURATION=0

#[include ADXL345.cfg] # load ADXL345 module ,Uncomment it before using ADXL345

# EXP1 / EXP2 (display) pins
#[board_pins]
#aliases:
    # EXP1 header
#    EXP1_1=PC1, EXP1_3=PA4, EXP1_5=PA6, EXP1_7=PC4, EXP1_9=<GND>,
#    EXP1_2=PC3, EXP1_4=PA5, EXP1_6=PA7, EXP1_8=PC5, EXP1_10=<5V>,
    # EXP2 header
#    EXP2_1=PB14, EXP2_3=PB11, EXP2_5=PB0,  EXP2_7=PC10,  EXP2_9=<GND>,
#    EXP2_2=PB13, EXP2_4=PA15, EXP2_6=PB15, EXP2_8=<RST>, EXP2_10=<NC>

############################################################################################################################
############################################################################################################################

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [printer]
#*# delta_radius = 182.578415
#*#
#*# [stepper_a]
#*# angle = 209.796428
#*# arm_length = 385.000000
#*# position_endstop = 429.758181
#*#
#*# [stepper_b]
#*# angle = 330.074040
#*# arm_length = 385.000000
#*# position_endstop = 430.170417
#*#
#*# [stepper_c]
#*# angle = 90.000000
#*# arm_length = 385.000000
#*# position_endstop = 429.518348
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.012605, -0.012605, 0.049261, 0.012799, -0.036884, -0.076376, -0.076376
#*# 	  -0.006855, 0.006642, 0.042983, -0.010443, 0.003084, -0.042728, -0.062773
#*# 	  -0.106251, -0.022249, -0.022567, -0.032263, -0.007818, -0.041898, 0.039291
#*# 	  -0.108605, -0.059821, -0.047207, -0.031230, 0.011523, 0.057471, 0.136749
#*# 	  -0.052467, -0.016143, -0.029872, -0.030071, -0.038264, 0.011597, 0.106464
#*# 	  -0.039419, -0.022054, -0.005516, -0.038436, 0.009629, 0.022470, 0.032084
#*# 	  0.017025, 0.017025, 0.021287, -0.043371, -0.016218, -0.020287, -0.020287
#*# tension = 0.2
#*# min_x = -156.0
#*# algo = bicubic
#*# y_count = 7
#*# mesh_y_pps = 2
#*# min_y = -156.0
#*# x_count = 7
#*# max_y = 156.0
#*# mesh_x_pps = 2
#*# max_x = 156.0
#*#
#*# [extruder]
#*#
#*# [heater_bed]
#*#
#*# [input_shaper]
#*# shaper_type_x = zero_zv
#*# shaper_freq_x = 42.2
#*# shaper_type_y = zero_zv
#*# shaper_freq_y = 43.8
#*#
#*# [delta_calibrate]
#*# height0 = -0.25
#*# height0_pos = 22934.500,22955.000,22921.500
#*# height1 = -0.25
#*# height1_pos = 26811.500,26834.500,20605.500
#*# height2 = -0.25
#*# height2_pos = 22396.000,29081.500,22392.500
#*# height3 = -0.25
#*# height3_pos = 20723.500,26223.500,26180.500
#*# height4 = -0.25
#*# height4_pos = 22304.000,22323.500,27139.500
#*# height5 = -0.25
#*# height5_pos = 25638.500,20881.500,25616.500
#*# height6 = -0.25
#*# height6_pos = 28051.500,22351.500,22325.500