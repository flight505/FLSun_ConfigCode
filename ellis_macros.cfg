# Ellis3DP-inspired macros adapted for FLSUN S1 PRO delta printer
# These macros enhance functionality with conditional operations and state management

################################################
# Conditional Homing
################################################
[gcode_macro _CG28]
description: Home if not already homed
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

################################################
# Delta-Safe Parking Macros
################################################
[gcode_macro PARKFRONT]
description: Park at front of bed (Y-140) for delta printer
gcode:
    _CG28  ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90    ; absolute positioning
    G1 X0 Y-140 Z{printer.toolhead.axis_maximum.z/2} F6000
    RESTORE_GCODE_STATE NAME=PARKFRONT

[gcode_macro PARKFRONTLOW]
description: Park at front of bed, low height
gcode:
    _CG28  ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONTLOW
    G90    ; absolute positioning
    G1 X0 Y-140 Z20 F6000
    RESTORE_GCODE_STATE NAME=PARKFRONTLOW

[gcode_macro PARKCENTER]
description: Park at center of build volume
gcode:
    _CG28  ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90    ; absolute positioning
    G1 X0 Y0 Z{printer.toolhead.axis_maximum.z/2} F6000
    RESTORE_GCODE_STATE NAME=PARKCENTER

[gcode_macro PARKBED]
description: Park 15mm above bed center
gcode:
    _CG28  ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKBED
    G90    ; absolute positioning
    G1 X0 Y0 Z15 F6000
    RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro PARKTOP]
description: Park at safe top position for delta
gcode:
    _CG28  ; home if not already homed
    SAVE_GCODE_STATE NAME=PARKTOP
    G90    ; absolute positioning
    G1 X0 Y0 Z{printer.toolhead.axis_maximum.z - 50} F6000
    RESTORE_GCODE_STATE NAME=PARKTOP

################################################
# DUMP_VARIABLES - Debug macro
################################################
[gcode_macro DUMP_VARIABLES]
description: Dump all Klipper variables to terminal for debugging
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}
    
    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join('\n'))}

################################################
# TEST_SPEED - Performance testing for delta
################################################
[gcode_macro TEST_SPEED]
description: Test maximum speeds and accelerations for delta printer
gcode:
    # Speed
    {% set speed = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum cruise ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (adjusted for delta print radius)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = params.SMALLPATTERNSIZE|default(20)|int %}
    
    # Get printer limits for delta
    {% set max_x = printer.configfile.settings.printer.print_radius|default(165)|float %}
    {% set max_y = printer.configfile.settings.printer.print_radius|default(165)|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|default(430)|float %}
    
    # Calculate safe positions for delta (circular bed)
    {% set radius_safe = max_x - bound %}
    {% set x_min = -radius_safe %}
    {% set x_max = radius_safe %}
    {% set y_min = -radius_safe %}
    {% set y_max = radius_safe %}
    
    # Create circular test pattern points for delta
    {% set x_center = 0 %}
    {% set y_center = 0 %}
    
    # Save current gcode state
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to console
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later
    _CG28
    # No QGL for delta printer
    GET_POSITION
    
    # Go to starting position
    G90
    G0 X{x_center} Y{y_center} Z{bound + 10} F{speed*60}
    
    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    
    {% for i in range(iterations) %}
        # Large pattern - adapted for delta circular bed
        # Move in a star pattern within the circular print area
        G0 X{x_center} Y{y_min} F{speed*60}
        G0 X{x_max * 0.7} Y{y_max * 0.7} F{speed*60}
        G0 X{x_min} Y{y_center} F{speed*60}
        G0 X{x_max * 0.7} Y{y_min * 0.7} F{speed*60}
        G0 X{x_center} Y{y_max} F{speed*60}
        G0 X{x_min * 0.7} Y{y_min * 0.7} F{speed*60}
        G0 X{x_max} Y{y_center} F{speed*60}
        G0 X{x_min * 0.7} Y{y_max * 0.7} F{speed*60}
        G0 X{x_center} Y{y_center} F{speed*60}
        
        # Small pattern at center
        G0 X{x_center - smallpatternsize/2} Y{y_center - smallpatternsize/2} F{speed*60}
        G0 X{x_center + smallpatternsize/2} Y{y_center - smallpatternsize/2} F{speed*60}
        G0 X{x_center + smallpatternsize/2} Y{y_center + smallpatternsize/2} F{speed*60}
        G0 X{x_center - smallpatternsize/2} Y{y_center + smallpatternsize/2} F{speed*60}
        G0 X{x_center - smallpatternsize/2} Y{y_center - smallpatternsize/2} F{speed*60}
    {% endfor %}
    
    # Restore max limits
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}
    
    # Re-home and get position again for comparison
    _CG28
    GET_POSITION
    
    # Restore previous gcode state
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    
    { action_respond_info("TEST_SPEED: Completed. Check console for position comparison to detect skipped steps.") }